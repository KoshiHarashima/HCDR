#Find NaN values in DAY,ORGANIZATION_TYPE,OCCUPATION_TYPE,NAME_FAMILY_STATUS
def replace_day_outlier(df):
  for col in df.columns:
    if "DAYS" in col:
      df[col] = df[col].replace(365243, np.nan)
  return df
df = replace_day_outlier(df)

df['ORGANIZATION_TYPE'] = df['ORGANIZATION_TYPE'].replace('XNA', np.nan)
df['OCCUPATION_TYPE'] = df['OCCUPATION_TYPE'].replace('XNA', np.nan)
df['NAME_FAMILY_STATUS'] =  df['NAME_FAMILY_STATUS'].replace('Unknown', np.nan)

#As for NAME_TYPE_SUITE with 
df.loc[(df['NAME_TYPE_SUITE'].isnull()) & (df['NAME_FAMILY_STATUS'].isin(['Married','Civil marriage'])),'NAME_TYPE_SUITE']= 'Spouse, partner' 
df['NAME_TYPE_SUITE'] = df['NAME_TYPE_SUITE'].fillna('Unaccompanied')

#As for OCCUPATION_TYPE with no job or in public
df.loc[(df['OCCUPATION_TYPE'].isna()) & (df['NAME_INCOME_TYPE'] == 'State servant'), 'OCCUPATION_TYPE'] = 'STATE'
df.loc[(df['OCCUPATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Unemployed'])), 'OCCUPATION_TYPE'] = 'NOT_WORK'
df.loc[(df['OCCUPATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Pensioner'])), 'OCCUPATION_TYPE'] = 'RETIRED'
df.loc[(df['OCCUPATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Student'])), 'OCCUPATION_TYPE'] = 'SCHOOL'

#As for ORGANIZATION_TYPE with no job
df.loc[(df['ORGANIZATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Pensioner'])), 'ORGANIZATION_TYPE'] = 'PENSIONER'
df.loc[(df['ORGANIZATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Unemployed'])), 'ORGANIZATION_TYPE'] = 'NO_WORK'

#Count NaN values so that we can evaluate credibility from that data（持っているのに申告しない人の方が危険なのでは？？）
df['NOT_TYPE_SUITE'] = df['NAME_FAMILY_STATUS'].isnull().astype(int)
df['NOT_SUBMITTED_BUREAU'] = (df[['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_YEAR', 'AMT_REQ_CREDIT_BUREAU_QRT']].isnull().any(axis=1)).astype(int)
df['NOT_SUBMITTED_FLAG'] = df[['FLAG_OWN_CAR', 'FLAG_OWN_REALTY']].isnull().any(axis=1).astype(int)
df['NON_SUBMITTED_OBS_DEF'] = (df[['OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE','OBS_60_CNT_SOCIAL_CIRCLE','DEF_60_CNT_SOCIAL_CIRCLE']].isnull().any(axis=1)).astype(int)
df['NOT_SUBMITTED_JOB'] = df[['ORGANIZATION_TYPE']].isnull().astype(int)
drop_column = ['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_YEAR', 'AMT_REQ_CREDIT_BUREAU_QRT',
               'OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE','OBS_60_CNT_SOCIAL_CIRCLE','DEF_60_CNT_SOCIAL_CIRCLE']
df['NaN_count'] = df.drop(drop_column, axis=1).isnull().sum(axis=1)  + df['NON_SUBMITTED_OBS_DEF'] + df['NOT_SUBMITTED_BUREAU'] 

# Fill NaN values in a most frequent and reasonable way
#As for FLAG_OWN_CAR
df.loc[df['FLAG_OWN_CAR'].isna(), 'FLAG_OWN_CAR'] = 'Unknown'

#As for FLAG_OWN_REALLTY
df.loc[df['FLAG_OWN_REALTY'].isna(),'FLAG_OWN_REALTY'] = 'Unknown' 

#As for ANNUITY AND GOODS PRICE needed to be considered

#As for DAYS_EMPLOYED
df.loc[df['NAME_INCOME_TYPE'] == 'Unemployed', 'DAYS_EMPLOYED'] =  0
df.loc[df['NAME_INCOME_TYPE'] == 'Pensioner', 'DAYS_EMPLOYED'] = df.loc[df['NAME_INCOME_TYPE'] == 'Unemployed', 'DAYS_BIRTH'] - 7300 

#As for OWN_CAR_AGE(FLAGとセットで考える。持っている人も申告をしていない可能性がある。）
df.loc[df['FLAG_OWN_CAR'] == 'N', OWN_CAR_AGE'] = 0

#As for NAME_FAMILY_STATUS
df['NAME_FAMILY_STATUS'] = df['NAME_FAMILY_STATUS'].fillna('Civil marriage')

#As for CNT_FAM_MEMBERS
df['CNT_FAM_MEMBERS'] = df['CNT_FAM_MEMBERS'].fillna(2)

#EXT_SOURCE_1_2_3 needed to be considered

#As for AMT_BUREAU,Phone, OBS, and DEF
df['AMT_REQ_CREDIT_BUREAU_HOUR'] = df['AMT_REQ_CREDIT_BUREAU_HOUR'].fillna(0)
df['AMT_REQ_CREDIT_BUREAU_MON'] = df['AMT_REQ_CREDIT_BUREAU_MON'].fillna(0)
df['AMT_REQ_CREDIT_BUREAU_QRT'] = df['AMT_REQ_CREDIT_BUREAU_QRT'].fillna(0)
df['AMT_REQ_CREDIT_BUREAU_YEAR'] = df['AMT_REQ_CREDIT_BUREAU_YEAR'].fillna(0)
df['DAYS_LAST_PHONE_CHANGE'] = df['DAYS_LAST_PHONE_CHANGE'].fillna(df['DAYS_LAST_PHONE_CHANGE'].median())
df['OBS_30_CNT_SOCIAL_CIRCLE'] = df['OBS_30_CNT_SOCIAL_CIRCLE'].fillna(0)
df['DEF_30_CNT_SOCIAL_CIRCLE'] = df['DEF_30_CNT_SOCIAL_CIRCLE'].fillna(0)
df['OBS_60_CNT_SOCIAL_CIRCLE'] = df['OBS_60_CNT_SOCIAL_CIRCLE'].fillna(0)
df['DEF_60_CNT_SOCIAL_CIRCLE'] = df['DEF_60_CNT_SOCIAL_CIRCLE'].fillna(0)

#About Time
def create_day_to_year(df, ls_cols, newcols):
  df[newcols] = round(np.abs(df[ls_cols[0]])/365)
  return df
create_day_to_year(df, ['DAYS_BIRTH'], 'AGE')
create_day_to_year(df, ['DAYS_REGISTRATION'], 'YEARS_REGISTRATION')
create_day_to_year(df,['DAYS_EMPLOYED'],'YEARS_EMPLOYED')
create_day_to_year(df, ['DAYS_ID_PUBLISH'], 'YEARS_ID_PUBLISH')
create_day_to_year(df, ['DAYS_REGISTRATION'], 'YEARS_REGISTRATION')
create_day_to_year(df, ['DAYS_LAST_PHONE_CHANGE'], 'YEARS_LAST_PHONE_CHANGE')
# Binning YEARS_EMPLOYED and AGE
df['YEARS_EMPLOYED_BINNED'] = pd.cut(df['YEARS_EMPLOYED'], bins=range(0, int(df['YEARS_EMPLOYED'].max()) + 5, 5), right=False)
df['AGE_BINNED'] = pd.cut(df['AGE'], bins=range(0, int(df['AGE'].max()) + 10, 10), right=False)
#As for AMT_ANNUITY
def fill_missing_by_group_vectorized(df, group_cols, cols_to_fill):
    for col in cols_to_fill:
        grouped = df.groupby(group_cols)[col]
        median_values = grouped.transform('median')
        df[col] = df[col].fillna(median_values)
group_cols = ['YEARS_EMPLOYED_BINNED', 'AGE_BINNED', 'OCCUPATION_TYPE', 'NAME_EDUCATION_TYPE']
cols_to_fill = ['AMT_ANNUITY']
fill_missing_by_group_vectorized(df, group_cols, cols_to_fill)

#'AMT_GOODS_PRICE'
