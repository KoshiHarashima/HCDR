#Find NaN values in DAY,ORGANIZATION_TYPE,OCCUPATION_TYPE,NAME_FAMILY_STATUS
def replace_day_outlier(df):
  for col in df.columns:
    if "DAYS" in col:
      df[col] = df[col].replace(365243, np.nan)
  return df
df = replace_day_outlier(df)

df['ORGANIZATION_TYPE'] = df['ORGANIZATION_TYPE'].replace('XNA', np.nan)
df['OCCUPATION_TYPE'] = df['OCCUPATION_TYPE'].replace('XNA', np.nan)
df['NAME_FAMILY_STATUS'] =  df['NAME_FAMILY_STATUS'].replace('Unknown', np.nan)

#Count NaN values so that we can evaluate credibility from that data
df['NOT_TYPE_SUITE'] = df['NAME_FAMILY_STATUS'].isnull().astype(int)
df['NOT_SUBMITTED_BUREAU'] = (df[['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_YEAR', 'AMT_REQ_CREDIT_BUREAU_QRT']].isnull().any(axis=1)).astype(int)
df['NOT_SUBMITTED_FLAG'] = df[['FLAG_OWN_CAR', 'FLAG_OWN_REALTY']].isnull().any(axis=1).astype(int)
df['NON_SUBMITTED_OBS_DEF'] = (df[['OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE','OBS_60_CNT_SOCIAL_CIRCLE','DEF_60_CNT_SOCIAL_CIRCLE']].isnull().any(axis=1)).astype(int)
df['NOT_SUBMITTED_JOB'] = df[['ORGANIZATION_TYPE']].isnull().astype(int)

drop_column = ['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_YEAR', 'AMT_REQ_CREDIT_BUREAU_QRT',
               'OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE','OBS_60_CNT_SOCIAL_CIRCLE','DEF_60_CNT_SOCIAL_CIRCLE']
df['NaN_count'] = df.drop(drop_column, axis=1).isnull().sum(axis=1)  + df['NON_SUBMITTED_OBS_DEF'] + df['NOT_SUBMITTED_BUREAU'] 

# Fill NaN values in a most frequent and reasonable way
#As for NAME_TYPE_SUITE
df.loc[(df['NAME_TYPE_SUITE'].isnull()) & (df['NAME_FAMILY_STATUS'].isin(['Married','Civil marriage'])),'NAME_TYPE_SUITE']= 'Spouse, partner' 
df.loc[(df['NAME_TYPE_SUITE'].isnull()) & (df['NAME_FAMILY_STATUS'].isin(['Single / not married','Separated','Widow'])), 'NAME_TYPE_SUITE'] = 'Unaccompanied'

#As for OCCUPATION_TYPE
df.loc[(df['OCCUPATION_TYPE'].isna()) & (df['NAME_INCOME_TYPE'] == 'State servant'), 'OCCUPATION_TYPE'] = 'STATE'
df.loc[(df['OCCUPATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Unemployed'])), 'OCCUPATION_TYPE'] = 'NOT_WORK'
df.loc[(df['OCCUPATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Pensioner'])), 'OCCUPATION_TYPE'] = 'RETIRED'
df.loc[(df['OCCUPATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Student'])), 'OCCUPATION_TYPE'] = 'SCHOOL'
                                          
#As for ORGANIZATION_TYPE
df.loc[(df['ORGANIZATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Pensioner'])), 'ORGANIZATION_TYPE'] = 'PENSIONER'
df.loc[(df['ORGANIZATION_TYPE'].isnull()) & (df['NAME_INCOME_TYPE'].isin(['Unemployed'])), 'ORGANIZATION_TYPE'] = 'NO_WORK'

#As for AMT_BUREAU, OBS, and DEF
df['AMT_REQ_CREDIT_BUREAU_HOUR'] = df['AMT_REQ_CREDIT_BUREAU_HOUR'].fillna(0)
df['AMT_REQ_CREDIT_BUREAU_MON'] = df['AMT_REQ_CREDIT_BUREAU_MON'].fillna(0)
df['AMT_REQ_CREDIT_BUREAU_QRT'] = df['AMT_REQ_CREDIT_BUREAU_QRT'].fillna(0)
df['AMT_REQ_CREDIT_BUREAU_YEAR'] = df['AMT_REQ_CREDIT_BUREAU_YEAR'].fillna(0)
df['OBS_30_CNT_SOCIAL_CIRCLE'] = df['OBS_30_CNT_SOCIAL_CIRCLE'].fillna(0)
df['DEF_30_CNT_SOCIAL_CIRCLE'] = df['DEF_30_CNT_SOCIAL_CIRCLE'].fillna(0)
df['OBS_60_CNT_SOCIAL_CIRCLE'] = df['OBS_60_CNT_SOCIAL_CIRCLE'].fillna(0)
df['DEF_60_CNT_SOCIAL_CIRCLE'] = df['DEF_60_CNT_SOCIAL_CIRCLE'].fillna(0)        

#As for AMT_ANNUITY(!!)
df['AMT_ANNUITY'] = df['AMT_ANNUITY'] .fillna(df['AMT_ANNUITY'].median())
df['AMT_GOODS_PRICE'] = df['AMT_GOODS_PRICE'].fillna(df["AMT_GOODS_PRICE"].median())
df['DAYS_LAST_PHONE_CHANGE'] = df['DAYS_LAST_PHONE_CHANGE'].fillna(df['DAYS_LAST_PHONE_CHANGE'].median())
df['YEARS_LAST_PHONE_CHANGE'] = df['YEARS_LAST_PHONE_CHANGE'].fillna(df['YEARS_LAST_PHONE_CHANGE'].median())

#As for OWN_CAR_AGE(!!)
#As for FLAG_OWN_CAR
df.loc[(df['FLAG_OWN_CAR'].isna()) & (df['CODE_GENDER'] == 'F'), 'FLAG_OWN_CAR'] = 'N'
df.loc[(df['FLAG_OWN_CAR'].isna()) & (df['CODE_GENDER'] == 'M') & (df['OCCUPATION_TYPE_PREJUDICE'] == 0), 'FLAG_OWN_CAR'] = 'N'
df.loc[(df['FLAG_OWN_CAR'].isna()) & (df['CODE_GENDER'] == 'M') & (df['OCCUPATION_TYPE_PREJUDICE'] == 1), 'FLAG_OWN_CAR'] = 'N'
df.loc[(df['FLAG_OWN_CAR'].isna()) & (df['CODE_GENDER'] == 'M') & (df['OCCUPATION_TYPE_PREJUDICE'] == 2), 'FLAG_OWN_CAR'] = 'Y'
df.loc[(df['FLAG_OWN_CAR'].isna()) & (df['CODE_GENDER'] == 'M') & (df['OCCUPATION_TYPE_PREJUDICE'] == 3), 'FLAG_OWN_CAR'] = 'Y'     
df['OWN_CAR_AGE'] = df['OWN_CAR_AGE'].fillna(0)

#As for FLAG_OWN_REALLTY(!!)
df.loc[(df['FLAG_OWN_REALTY'].isna()) &(df['NAME_HOUSING_TYPE'].isin(['House / apartment', 'Co-op apartment', 'Office apartment'])),'FLAG_OWN_REALTY'] = 'Y'
df.loc[(df['FLAG_OWN_REALTY'].isna()) &(df['NAME_HOUSING_TYPE'].isin(['Municipal apartment', 'Rented apartment', 'With parents'])),'FLAG_OWN_REALTY'] = 'N'  

                                      
